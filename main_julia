/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main_julia.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sakllam <sakllam@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/12/10 23:54:31 by sakllam           #+#    #+#             */
/*   Updated: 2021/12/15 01:42:42 by sakllam          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "mlx.h"
#include "fractol.h"
#include <stdio.h>
typedef struct	s_vars {
	void	*mlx;
	void	*win;
}				t_vars;
int     mlx_mouse_get_pos(void *win_ptr, int *x, int *y);

typedef struct	s_demontions {
	int	x;
	int	y;
}				t_demontions;

int	key_hook(int keycode, t_vars *vars)
{
	if (keycode == 4)
    {

    }
    else if (keycode == 5)
    {

    }
    else if (keycode == 1)
    {

    }
    return (0);
}
// int ft_fractol(int height, int width, int iteration, int x_dem, int y_dem, int color, int *image)
// {
//     int y;
//     int x;
//     int count;
//     float real_c;
//     float image_c;
//     float real_z = 0;
//     float image_z = 0;
//     float tmp_z;

//     y = 0;
//     while (y < height)
//     {
//         x = 0;
//         while (x < width)
//         {
//         count = 0;
//                 float xo = x - width / 2.0;
//                 float yo = -y + height / 2.0;
//                 image_c = 0.1242;
//                 real_c = -0.8406;
//                 real_z = 4 * xo / (float)width;
//                 image_z = yo * 4 / (float)height;
//             while (count < iteration)
//             {
//                 tmp_z = real_z;
//                 real_z = (real_z * real_z) - (image_z * image_z) + real_c;
//                 image_z = 2 * tmp_z * image_z + image_c;
//                 if ((real_z * real_z + image_z * image_z) > 4)
//                     break;
//                 count++;
//             }
//             image[y * width + x] = color << (iteration - count);
//             x++;
//         }
//         y++;
//     }
// }
int main()
{
    t_vars	vars; //added
    int iteration = 50;
    float real_c;
    float image_c;
    float real_z = 0;
    float image_z = 0;
    float tmp_z;
    int count = 0;
    int x;
    int y;
    int width = 1000;
    int height = 880;
    int pixel_bits;
    int line_bytes;
    int endian;
    int color = 0x00EE47FF;
    void *init_ret = mlx_init();
    void *wind_ret = mlx_new_window(init_ret, width, height, "EVBLOOD");
    void *new_image_ret = mlx_new_image(init_ret, width, height);
    int *buffer = (int *)mlx_get_data_addr(new_image_ret, &pixel_bits, &line_bytes, &endian);
    while (y < height)
    {
        x = 0;
        while (x < width)
        {
        count = 0;
                float xo = x - width / 2.0;
                float yo = -y + height / 2.0;
                image_c = 0.1242;
                real_c = -0.8406;
                real_z = 4 * xo / (float)width;
                image_z = yo * 4 / (float)height;
            while (count < iteration)
            {
                tmp_z = real_z;
                real_z = (real_z * real_z) - (image_z * image_z) + real_c;
                image_z = 2 * tmp_z * image_z + image_c;
                if ((real_z * real_z + image_z * image_z) > 4)
                    break;
                count++;
            }
                buffer[y * width + x] = color << (iteration - count);
            x++;
        }
        y++;
    }
    vars.win = wind_ret;
    vars.mlx = init_ret;
    mlx_put_image_to_window(init_ret, wind_ret, new_image_ret, 0, 0);
    t_vargs cx;
    // cx.win 
    cx.color = color;
    int reti = mlx_mouse_hook(vars.win, key_hook, &vars);
    printf("%d", reti);
    // int posx;
    // int posy;
    //  mlx_mouse_get_pos(vars.win, &posx, &posy);
    // printf("|x = %d|y = %d|\n", posx, posy);
    mlx_loop(init_ret);
}